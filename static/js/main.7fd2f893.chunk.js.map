{"version":3,"sources":["components/Editor.js","components/Preview.js","App.js","serviceWorker.js","index.js"],"names":["Editor","_this$props","this","props","handleChange","code","react_default","a","createElement","className","id","name","rows","onChange","defaultValue","Component","Preview","renderer","marked","Renderer","link","href","title","text","concat","setOptions","breaks","dangerouslySetInnerHTML","__html","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","e","setState","defineProperty","target","value","state","placeholder","Editor_Editor","Preview_Preview","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qQAEqBA,0LACX,IAAAC,EACuBC,KAAKC,MAA5BC,EADAH,EACAG,aAAcC,EADdJ,EACcI,KACtB,OACCC,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,UACAH,EAAAC,EAAAC,cAAA,YACCF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACdH,EAAAC,EAAAC,cAAA,YACCE,GAAG,SACHD,UAAU,eACVE,KAAK,OACLC,KAAK,KACLC,SAAUT,EACVU,aAAcT,cAdeU,8BCCfC,mLAEnB,IAAMC,EAAW,IAAIC,IAAOC,SAO5B,OANAF,EAASG,KAAO,SAASC,EAAMC,EAAOC,GACrC,MAAO,4BAAAC,OAA4BH,EAA5B,MAAAG,OAAqCD,GAAS,QAEtDL,IAAOO,WAAW,CACjBC,QAAQ,IAGRpB,EAAAC,EAAAC,cAAA,WACCF,EAAAC,EAAAC,cAAA,MAAIC,UAAU,cAAd,WACAH,EAAAC,EAAAC,cAAA,OACCE,GAAG,UACHD,UAAU,iBACVkB,wBAAyB,CACxBC,OAAQV,IAAOhB,KAAKC,MAAME,KAAM,CAAEY,SAAUA,eAhBbF,aCE/Bc,cACL,SAAAA,EAAY1B,GAAO,IAAA2B,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAA7B,KAAA2B,IAClBC,EAAAC,OAAAE,EAAA,EAAAF,CAAA7B,KAAA6B,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAjC,KAAMC,KAMPC,aAAe,SAAAgC,GACdN,EAAKO,SAALN,OAAAO,EAAA,EAAAP,CAAA,GAAiBK,EAAEG,OAAO5B,KAAOyB,EAAEG,OAAOC,SAN1CV,EAAKW,MAAQ,CACZpC,KAAMqC,GAHWZ,wEAWV,IACAzB,EAASH,KAAKuC,MAAdpC,KACR,OACCC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACdH,EAAAC,EAAAC,cAACmC,EAAD,CAAQtC,KAAMA,EAAMD,aAAcF,KAAKE,eACvCE,EAAAC,EAAAC,cAACoC,EAAD,CAASvC,KAAMA,aAlBFU,aAyBZ2B,EAAW,oWA0BFb,IC5CKgB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7C,EAAAC,EAAAC,cAAC4C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.7fd2f893.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class Editor extends Component {\r\n\trender() {\r\n\t\tconst { handleChange, code } = this.props;\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className=\"text-white\">EDITOR</h1>\r\n\t\t\t\t<form>\r\n\t\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t\t<textarea\r\n\t\t\t\t\t\t\tid=\"editor\"\r\n\t\t\t\t\t\t\tclassName=\"form-control\"\r\n\t\t\t\t\t\t\tname=\"code\"\r\n\t\t\t\t\t\t\trows=\"20\"\r\n\t\t\t\t\t\t\tonChange={handleChange}\r\n\t\t\t\t\t\t\tdefaultValue={code}\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t</div>\r\n\t\t\t\t</form>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from \"react\";\r\nimport marked from \"marked\";\r\n\r\nexport default class Preview extends Component {\r\n\trender() {\r\n\t\tconst renderer = new marked.Renderer();\r\n\t\trenderer.link = function(href, title, text) {\r\n\t\t\treturn `<a target=\"_blank\" href=\"${href}\">${text}` + \"</a>\";\r\n\t\t};\r\n\t\tmarked.setOptions({\r\n\t\t\tbreaks: true\r\n\t\t});\r\n\t\treturn (\r\n\t\t\t<div>\r\n\t\t\t\t<h1 className=\"text-white\">PREVIEW</h1>\r\n\t\t\t\t<div\r\n\t\t\t\t\tid=\"preview\"\r\n\t\t\t\t\tclassName=\"card card-body\"\r\n\t\t\t\t\tdangerouslySetInnerHTML={{\r\n\t\t\t\t\t\t__html: marked(this.props.code, { renderer: renderer })\r\n\t\t\t\t\t}}\r\n\t\t\t\t/>\r\n\t\t\t</div>\r\n\t\t);\r\n\t}\r\n}\r\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Editor from \"./components/Editor\";\nimport Preview from \"./components/Preview\";\n\nclass App extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcode: placeholder\n\t\t};\n\t}\n\n\thandleChange = e => {\n\t\tthis.setState({ [e.target.name]: e.target.value });\n\t};\n\n\trender() {\n\t\tconst { code } = this.state;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<div className=\"container\">\n\t\t\t\t\t<Editor code={code} handleChange={this.handleChange} />\n\t\t\t\t\t<Preview code={code} />\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nconst placeholder = `# This is an h1!\n## This is an h2\n\nSome inline code \\`<div></div>\\`.\n\n\\`\\`\\`\n// multi-line code:\n\nfunction HelloWorld() {\n  const text = \"Hello World\";\n  alert(text);\n}\n\\`\\`\\`\n**Bold Text Here**\n[Here](https://github.com/EliseiDanciu) is my GitHub account\n\n> Block Quotes here\n\n1. This\n1. is\n1. a\n- list\n\n![Image](https://goo.gl/Umyytc)\n`;\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}